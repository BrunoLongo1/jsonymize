#!/usr/bin/env node
var jsonymize = require("../lib/jsonymize");
var fs = require("fs");
var path = require("path");
var cjson = require("cjson");
var check = require("check-types");
var yargs = require("yargs")
    .usage("Anonymize JSON values.\n\nUsage: jsonymize [fields]")
    .options("e", {
      alias: "extension",
      description: "ChanceJS mixin providing custom generators"
    })
    .options("c", {
      alias: "config",
      description: "Advanced configuration file"
    })
    .options("h", {
      alias: "help",
      description: "Show this help message"
    });

var argv = yargs.argv;

if (argv.help) {
  yargs.showHelp();
  return;
}

var configPath = argv.config ? path.resolve(process.cwd(), argv.config) : undefined;
if (configPath && !fs.existsSync(configPath)) {
  console.error("Configuration file \"" + configPath + "\" could not be read.");
  return;
}

var config = argv.config ? cjson.load(argv.config) : {};
var generators = argv.generator || config.generators || {};
var extensions = fallback(argv.extension, config.extensions, []);
var aliases = argv.alias || config.aliases || {};
var fields = (argv._.length ? argv._ : undefined) || config.fields || [];

process.stdin.resume();
process.stdin.setEncoding("utf8");

jsonymize()
  .aliases(aliases)
  .fields(fields)
  .generators(generators)
  .extensions(extensions.map(function(extension) { return path.resolve(process.cwd(), extension); }))
  .anonymize(process.stdin)
  .then(function(anonymized) {
    process.stdout.write(anonymized + "\n");
    process.stdout.flush();
  }, function(error) {
    process.stderr.write("Error! " + JSON.stringify(error.thrown) + "\n");
  });

function fallback(args, config, def) {
  if (args) {
    return check.array(args) ? args : [args];
  } else if (config) {
    return config
  } else {
    return def;
  }
}